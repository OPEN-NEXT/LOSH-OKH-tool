#!/usr/bin/env bash
# SPDX-FileCopyrightText: 2024 Robin Vobruba <hoijui.quaero@gmail.com>
# SPDX-License-Identifier: Unlicense
#
# See the output of "$0 -h" for details.

# Exit immediately on each error and unset variable;
# see: https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail
#set -Eeu

script_path="$(readlink -f "${BASH_SOURCE[0]}")"
script_dir="$(dirname "$script_path")"
script_name="$(basename "$script_path")"
project_dir="$(dirname "$script_dir")"
target_dir="$project_dir/target"
api_specs_dir="$target_dir/api_specs"

# initial default values
APP_NAME="RDF Serialization check"
overwrite=false
all=false

print_help() {

	echo "$APP_NAME - Downloads all latest API specs,"
	echo "for:"
	echo
	echo "- OSHWA"
	echo "- Thingiverse"
	echo "- GitHub"
	echo "- GitLab"
	echo
	echo "Usage:"
	echo "  $script_name [OPTION...]"
	echo "Options:"
	echo "  -h, --help"
	echo "    Shows this help message and exit"
	echo "  -o, --overwrite"
	echo "    Overwrites existing files"
	echo "  -a, --all"
	echo "    Downloads all API specs (default: Only relevant ones)"
	echo "Examples:"
	echo "  $script_name"
	echo "  $script_name --help"
	echo "  $script_name --overwrite"
}

# Process command line arguments
while [[ $# -gt 0 ]]
do
	arg="$1"
	shift # $2 -> $1, $3 -> $2, ...

	case "$arg" in
		-h|--help)
			print_help
			exit 0
			;;
		-o|--overwrite)
			overwrite=true
			;;
		-a|--all)
			all=true
			;;
		*) # non-/unknown option
			>&2 echo "Unknown arg: '$arg'"
			exit 1
			;;
	esac
done

function log() {
    local level timestamp
    level="$(printf '%s' "$1" | tr '/a-z/' '/A-Z/')"
    # timestamp="$(date +'%Y-%m-%d %H:%M:%S')"
    timestamp="$(date --iso-8601=seconds)"
    shift
    >&2 echo "$timestamp $level $*"
}

function download() {
    local url file_path
    url="$1"
    file_path="$2"

    mkdir -p "$(dirname "$file_path")"
    if $overwrite || [ ! -e "$file_path" ]
    then
        log info "Downloading '$url' to '$file_path' ..."
        wget \
            --quiet \
            -O "$file_path" \
            "$url"
    else
        log info "Already present, skipping download of '$file_path'."
    fi
}

function generate_graphql_schema_from_endpoint() {
    local endpoint_url file_path
    endpoint_url="$1"
    file_path="$2"

    mkdir -p "$(dirname "$file_path")"
    if $overwrite || [ ! -e "$file_path" ]
    then
        log info "Generating GraphQL schema from '$url' at '$file_path' ..."
        # NOTE We need to use a software to grab it,
        #      see: <https://stackoverflow.com/questions/69212403/download-gitlabs-graphql-schema>
        #      We chose `graphql-client` (Rust),
        #      which is installable with `cargo install graphql_client_cli`.
        graphql-client \
            introspect-schema \
            "$endpoint_url" \
            --output "$file_path"
    else
        log info "Already present locally, skipping generation of GraphQL schema from '$endpoint_url' at '$file_path'."
    fi
}

function prettify_json() {
    local json_file tmp_file
    json_file="$1"
    tmp_file="${json_file%.json}.tmp.json}"

    jq \
        < "$json_file" \
        > "$tmp_file"
    mv "$tmp_file" "$json_file"
}

function yaml2json() {
    local yaml_file json_file
    yaml_file="$1"
    json_file="${2:-${yaml_file%.yaml}.json}"

    yq r \
        --tojson \
        --prettyPrint \
        "$yaml_file" \
        > "$json_file" \
        || true
}

# ## OSHWA
oshwa_dir="$api_specs_dir/oshwa"
mkdir -p "$oshwa_dir"
download \
    "https://certificationapi.oshwa.org/open-api-spec" \
    "$oshwa_dir/open-api-spec.json"
prettify_json "$oshwa_dir/open-api-spec.json"

# ## Thingiverse
tv_dir="$api_specs_dir/thingiverse"
mkdir -p "$tv_dir"
tv_specs_url="https://www.thingiverse.com/swagger/docs"

function tv_dl() {
    local yaml_file_ref json_file
    yaml_file_ref="$1"
    url="$tv_specs_url/$yaml_file_ref"
    yaml_file="$tv_dir/$yaml_file_ref"
    json_file="${2:-${yaml_file%.yaml}.json}"

    download "$url" "$yaml_file"
    yaml2json "$yaml_file" "$json_file"
    # echo "$json_file"
}

tv_dl "openapi.yaml"
if $all
then
    grep \
        -r \
        '".ref"' "$tv_dir/openapi.json" \
        | sed \
            -E \
            -e 's|[ \t]*".ref": "||' \
            -e 's|"$||' \
            -e 's|#.*$||' \
        | sort -u \
        | while read -r ref
    do
        tv_dl "$ref"
    done
else
    for cat_name in category collection email file image_summary tag thing user
    do
        tv_dl "resources/${cat_name}.yaml" || true
        tv_dl "schemas/${cat_name}_schema.yaml"
    done
fi

# ## GitHub
gh_dir="$api_specs_dir/github"
mkdir -p "$gh_dir"
gh_gql_schema="https://docs.github.com/public/fpt/schema.docs.graphql"
gh_rest_schema="https://github.com/github/rest-api-description/raw/refs/heads/main/descriptions/api.github.com/api.github.com.json"

download \
    "$gh_gql_schema" \
    "$gh_dir/$(basename "$gh_gql_schema")"
download \
    "$gh_rest_schema" \
    "$gh_dir/$(basename "$gh_rest_schema")"

# ## GitLab.com
glcom_dir="$api_specs_dir/gitlab_com"
mkdir -p "$glcom_dir"
glcom_gql_endpoint="https://gitlab.com/api/graphql"
glcom_rest_schema="https://gitlab.com/gitlab-org/gitlab/-/raw/master/doc/api/openapi/openapi.yaml"
# NOTE GitLab does not provide its own GraphQL schema as a file,
#      probably for good reason, because each GitLab instance
#      might have a different version of it.
generate_graphql_schema_from_endpoint \
    "$glcom_gql_endpoint" \
    "$glcom_dir/graphql-schema.gql"
generate_graphql_schema_from_endpoint \
    "$glcom_gql_endpoint" \
    "$glcom_dir/graphql-schema.json"

glcom_openapi_yaml="$glcom_dir/$(basename "$glcom_rest_schema")"
download \
    "$glcom_rest_schema" \
    "$glcom_openapi_yaml"
yaml2json "$glcom_openapi_yaml"


# ## gitlab.opensourceecology.de
gloseg_dir="$api_specs_dir/gitlab_opensourceecology_de"
mkdir -p "$gloseg_dir"
gloseg_gql_endpoint="https://gitlab.opensourceecology.de/api/graphql"
gloseg_rest_schema="$glcom_rest_schema"
generate_graphql_schema_from_endpoint \
    "$gloseg_gql_endpoint" \
    "$gloseg_dir/graphql-schema.gql"
generate_graphql_schema_from_endpoint \
    "$gloseg_gql_endpoint" \
    "$gloseg_dir/graphql-schema.json"

# The REST/OpenAPI schema is the same as for GitLab.com
gloseg_openapi_yaml="$gloseg_dir/$(basename "$gloseg_rest_schema")"
rm -f "$gloseg_openapi_yaml"
ln -s "$glcom_openapi_yaml" "$gloseg_openapi_yaml"
yaml2json "$gloseg_openapi_yaml"

echo "done."
